{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/base/Enum.js",
    "src/base/Interface.js",
    "src/base/index.js",
    "src/index.js",
    "src/libs/TypeChecker.js",
    "src/libs/index.js",
    "src/libs/sys/JavaLibraryScriptCore.js",
    "src/libs/sys/index.js",
    "src/main.js",
    "src/util/BaseMap.js",
    "src/util/HashMap.js",
    "src/util/LinkedHashMap.js",
    "src/util/TreeMap.js",
    "src/util/index.js",
    "src/util/stream/AsyncStream.js",
    "src/util/stream/EntryStream.js",
    "src/util/stream/NumberStream.js",
    "src/util/stream/Stream.js",
    "src/util/stream/StreamInterface.js",
    "src/util/stream/StringStream.js",
    "src/util/stream/index.js"
  ],
  "names": [],
  "mappingshSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChIA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "const JavaLibraryScriptCore = require(\"../libs/sys/JavaLibraryScriptCore.js\");\r\n\r\n/**\r\n * 単一のEnum要素を表すクラス\r\n */\r\nclass _EnumItem extends JavaLibraryScriptCore {\r\n\t/**\r\n\t * @param {string} name - Enumのキー名\r\n\t * @param {number} ordinal - 順序番号（自動インクリメント）\r\n\t * @param {any} value - 任意の値（name, 数値, オブジェクトなど）\r\n\t * @param {_EnumCore} [owner] - Enumのインスタンス\r\n\t * @param {{[methodName: string]: (...args: any[]) => any}} [methods] - Enumのメソッド\r\n\t */\r\n\tconstructor(name, ordinal, value = name, owner = null, methods = {}) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t\tthis.ordinal = ordinal;\r\n\t\tthis.value = value;\r\n\r\n\t\tthis.owner = owner;\r\n\r\n\t\tfor (const [key, fn] of Object.entries(methods)) {\r\n\t\t\tif (typeof fn === \"function\") {\r\n\t\t\t\tthis[key] = fn.bind(this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\t/**\r\n\t * 名前を返す\r\n\t * @returns {string}\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\t/**\r\n\t * JSON化\r\n\t * @returns {string}\r\n\t */\r\n\ttoJSON() {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\t/**\r\n\t * ordinalでの比較\r\n\t * @param {_EnumItem} other\r\n\t * @returns {number}\r\n\t */\r\n\tcompareTo(other) {\r\n\t\treturn this.ordinal - other.ordinal;\r\n\t}\r\n\r\n\t/**\r\n\t * 同一EnumItemかチェック\r\n\t * @param {_EnumItem} other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other) {\r\n\t\treturn other instanceof _EnumItem && this.name === other.name && this.ordinal === other.ordinal && this.value === other.value;\r\n\t}\r\n\r\n\t/**\r\n\t * ハッシュコード生成（簡易）\r\n\t * @returns {number}\r\n\t */\r\n\thashCode() {\r\n\t\treturn this.name.split(\"\").reduce((h, c) => h + c.charCodeAt(0), 0) + this.ordinal * 31;\r\n\t}\r\n}\r\n\r\n/**\r\n * Enum を生成するクラス\r\n */\r\nclass _EnumCore extends JavaLibraryScriptCore {\r\n\t/**\r\n\t * @param {Array<string | [string, any]> | Record<string, any>} defs - 定義\r\n\t * @param {{[methodName: string]: (...args: any[]) => any}} [options.methods] - Enumのメソッド\r\n\t */\r\n\tconstructor(defs, options = {}) {\r\n\t\tsuper();\r\n\t\t/** @type {_EnumItem[]} */\r\n\t\tthis._items = [];\r\n\t\tthis._methods = options.methods || {};\r\n\r\n\t\tlet entries;\r\n\r\n\t\tif (Array.isArray(defs)) {\r\n\t\t\tentries = defs.map((def) => (Array.isArray(def) ? def : [def, def]));\r\n\t\t} else if (typeof defs === \"object\" && defs !== null) {\r\n\t\t\tentries = Object.entries(defs);\r\n\t\t} else {\r\n\t\t\tthrow new TypeError(\"Enum: 配列か連想配列で定義してください\");\r\n\t\t}\r\n\r\n\t\tentries.forEach(([name, value], index) => {\r\n\t\t\tconst item = new _EnumItem(name, index, value, this, this._methods);\r\n\t\t\tObject.defineProperty(this, name, {\r\n\t\t\t\tvalue: item,\r\n\t\t\t\twritable: false,\r\n\t\t\t\tconfigurable: false,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t});\r\n\t\t\tthis._items.push(item);\r\n\t\t});\r\n\r\n\t\tObject.freeze(this._items);\r\n\t}\r\n\r\n\t/**\r\n\t * Enumの全要素を配列で取得\r\n\t * @returns {_EnumItem[]}\r\n\t */\r\n\tvalues() {\r\n\t\treturn this._items.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * 名前からEnumItemを取得\r\n\t * @param {string} name\r\n\t * @returns {_EnumItem | undefined}\r\n\t */\r\n\tvalueOf(name) {\r\n\t\treturn this[name];\r\n\t}\r\n\t/**\r\n\t * 名前からEnumItemを取得\r\n\t * @param {string} name\r\n\t * @returns {_EnumItem | undefined}\r\n\t */\r\n\tfromName = valueOf;\r\n\r\n\t/**\r\n\t * 値からEnumItemを取得\r\n\t * @param {any} value\r\n\t * @returns {_EnumItem | undefined}\r\n\t */\r\n\tfromValue(value) {\r\n\t\treturn this._items.find((e) => e.value === value);\r\n\t}\r\n\r\n\t/**\r\n\t * ordinalからEnumItemを取得\r\n\t * @param {number} ordinal\r\n\t * @returns {_EnumItem | undefined}\r\n\t */\r\n\tfromOrdinal(ordinal) {\r\n\t\treturn this._items.find((e) => e.ordinal === ordinal);\r\n\t}\r\n\r\n\t/**\r\n\t * Enumにそのnameが存在するか\r\n\t * @param {string} name\r\n\t * @returns {boolean}\r\n\t */\r\n\thas(name) {\r\n\t\treturn typeof this[name] === \"object\" && this[name] instanceof _EnumItem;\r\n\t}\r\n\r\n\t/**\r\n\t * name → _EnumItem の [name, item] 配列を返す\r\n\t * @returns {[string, _EnumItem][]}\r\n\t */\r\n\tentries() {\r\n\t\treturn this._items.map((e) => [e.name, e]);\r\n\t}\r\n\r\n\t/**\r\n\t * Enumの全nameを返す\r\n\t * @returns {string[]}\r\n\t */\r\n\tkeys() {\r\n\t\treturn this._items.map((e) => e.name);\r\n\t}\r\n\r\n\t/**\r\n\t * name → value のマップを返す\r\n\t * @returns {Record<string, any>}\r\n\t */\r\n\ttoMap() {\r\n\t\tconst map = {};\r\n\t\tfor (const e of this._items) {\r\n\t\t\tmap[e.name] = e.value;\r\n\t\t}\r\n\t\treturn map;\r\n\t}\r\n\r\n\t/**\r\n\t * JSONシリアライズ用のtoJSONメソッド\r\n\t * @returns {Array<{name: string, ordinal: number, value: any}>} 列挙子の配列\r\n\t */\r\n\ttoJSON() {\r\n\t\treturn this._items.map((item) => item.toJSON());\r\n\t}\r\n\r\n\t/**\r\n\t * for...of に対応\r\n\t */\r\n\t*[Symbol.iterator]() {\r\n\t\tyield* this._items;\r\n\t}\r\n\r\n\t/**\r\n\t * インデックス付きで列挙子を返すジェネレータ\r\n\t * @returns {Generator<[number, _EnumItem]>} インデックスと列挙子のペア\r\n\t */\r\n\t*enumerate() {\r\n\t\tfor (let i = 0; i < this._items.length; i++) {\r\n\t\t\tyield [i, this._items[i]];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * DynamicEnum生成関数（インデックスアクセスに対応したProxy付き）\r\n * @param {Array<string | [string, any]> | Record<string, any>} defs\r\n * @param {{[methodName: string]: (...args: any[]) => any}} [options.methods] - Enumのメソッド\r\n * @returns {_EnumCore & Proxy}\r\n */\r\nfunction Enum(defs, options = {}) {\r\n\tconst core = new _EnumCore(defs, options);\r\n\treturn new Proxy(core, {\r\n\t\tget(target, prop, receiver) {\r\n\t\t\tif (typeof prop === \"string\" && /^[0-9]+$/.test(prop)) {\r\n\t\t\t\tconst index = Number(prop);\r\n\t\t\t\treturn target._items[index];\r\n\t\t\t}\r\n\t\t\treturn Reflect.get(target, prop, receiver);\r\n\t\t},\r\n\r\n\t\tenumerate(target) {\r\n\t\t\t// 数字のインデックスを除外\r\n\t\t\treturn Object.keys(target._items).map((i) => i.toString());\r\n\t\t},\r\n\r\n\t\thas(target, prop) {\r\n\t\t\tif (typeof prop === \"string\" && /^[0-9]+$/.test(prop)) {\r\n\t\t\t\tconst index = Number(prop);\r\n\t\t\t\treturn index >= 0 && index < target._items.length;\r\n\t\t\t}\r\n\t\t\treturn prop in target;\r\n\t\t},\r\n\r\n\t\townKeys(target) {\r\n\t\t\tconst keys = Reflect.ownKeys(target);\r\n\t\t\tconst indexes = target._items.map((_, i) => i.toString());\r\n\t\t\treturn [...keys, ...indexes];\r\n\t\t},\r\n\r\n\t\tgetOwnPropertyDescriptor(target, prop) {\r\n\t\t\tif (typeof prop === \"string\" && /^[0-9]+$/.test(prop)) {\r\n\t\t\t\t// プロパティがターゲットに存在するか確認\r\n\t\t\t\tif (prop in target._items) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tvalue: target._items[Number(prop)],\r\n\t\t\t\t\t\twritable: false,\r\n\t\t\t\t\t\tconfigurable: false,\r\n\t\t\t\t\t\tenumerable: true,\r\n\t\t\t\t\t};\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// プロパティが存在しない場合はエラーを避ける\r\n\t\t\t\t\treturn undefined; // これでエラーを避ける\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn Object.getOwnPropertyDescriptor(target, prop);\r\n\t\t},\r\n\r\n\t\tset(target, prop, value) {\r\n\t\t\tthrow new TypeError(`Enumは変更できません: ${String(prop)} = ${value}`);\r\n\t\t},\r\n\r\n\t\tdefineProperty(target, prop, descriptor) {\r\n\t\t\tthrow new TypeError(`Enumにプロパティを追加/変更できません: ${String(prop)}`);\r\n\t\t},\r\n\r\n\t\tdeleteProperty(target, prop) {\r\n\t\t\tthrow new TypeError(`Enumのプロパティを削除できません: ${String(prop)}`);\r\n\t\t},\r\n\t});\r\n}\r\n\r\nmodule.exports = {\r\n\t_EnumItem,\r\n\t_EnumCore,\r\n\tEnum,\r\n};\r\n",
    "const JavaLibraryScriptCore = require(\"../libs/sys/JavaLibraryScriptCore.js\");\r\nconst TypeChecker = require(\"../libs/TypeChecker.js\");\r\n\r\nclass Interface extends JavaLibraryScriptCore {\r\n\tstatic _isDebugMode = false;\r\n\r\n\tstatic methodTypes = {};\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tif (new.target === Interface) {\r\n\t\t\tthrow new Error(\"Interfaceは直接インスタンス化できません。継承して使ってください。\");\r\n\t\t}\r\n\r\n\t\tif (!Interface._isDebugMode) return;\r\n\r\n\t\tconst cls = this.constructor;\r\n\t\tconst typeDefs = cls.methodTypes || {};\r\n\r\n\t\tfor (const method in typeDefs) {\r\n\t\t\tconst def = typeDefs[method];\r\n\t\t\tif (typeof this[method] !== \"function\") {\r\n\t\t\t\tthrow new Error(`\"${cls.name}\" はメソッド \"${method}\" を実装する必要があります`);\r\n\t\t\t}\r\n\r\n\t\t\tconst originalMethod = this[method].bind(this);\r\n\r\n\t\t\tthis[method] = (...args) => {\r\n\t\t\t\t// 引数チェック\r\n\t\t\t\tconst expectedArgs = def.args || [];\r\n\t\t\t\tfor (let i = 0; i < expectedArgs.length; i++) {\r\n\t\t\t\t\tif (!TypeChecker.matchType(args[i], expectedArgs[i])) {\r\n\t\t\t\t\t\tthrow new TypeError(`\"${cls.name}.${method}\" 第${i + 1}引数: ${TypeChecker.typeNames(expectedArgs[i])} を期待 → 実際: ${TypeChecker.stringify(args[i])}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst result = originalMethod(...args);\r\n\r\n\t\t\t\t// 戻り値型を動的に取得\r\n\t\t\t\tconst ret = def.returns;\r\n\t\t\t\tconst expectedReturn = TypeChecker.checkFunction(ret) ? ret(args) : ret;\r\n\r\n\t\t\t\tconst validate = (val) => {\r\n\t\t\t\t\tif (!TypeChecker.matchType(val, expectedReturn)) {\r\n\t\t\t\t\t\tthrow new TypeError(`\"${cls.name}.${method}\" の戻り値: ${TypeChecker.typeNames(expectedReturn)} を期待 → 実際: ${TypeChecker.stringify(val)}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn val;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (result instanceof Promise) {\r\n\t\t\t\t\treturn result.then(validate);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn validate(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = Interface;\r\n",
    "module.exports = {\n  ...require(\"./Enum.js\"),\n  Interface: require(\"./Interface.js\")\n};\n",
    "module.exports = {\n  base: require(\"./base\"),\n  libs: require(\"./libs\"),\n  util: require(\"./util\")\n};\n",
    "const JavaLibraryScriptCore = require(\"../libs/sys/JavaLibraryScriptCore.js\");\r\nconst { _EnumCore, _EnumItem } = require(\"../base/Enum.js\");\r\n\r\nclass TypeChecker extends JavaLibraryScriptCore {\r\n\tstatic _CLASS_REG = /^\\s*class\\s+/;\r\n\r\n\t// ==================================================\r\n\tstatic _NotType = class _NotType extends JavaLibraryScriptCore {\r\n\t\tconstructor(typeToExclude) {\r\n\t\t\tsuper();\r\n\t\t\tif (typeToExclude instanceof TypeChecker._NotType) throw new TypeError(\"typeToExclude must be instance of NotType\");\r\n\t\t\tthis.typeToExclude = typeToExclude;\r\n\t\t}\r\n\t};\r\n\r\n\tstatic NotType(typeToExclude) {\r\n\t\treturn new TypeChecker._NotType(typeToExclude);\r\n\t}\r\n\t// ==================================================\r\n\r\n\tstatic Any = Symbol(\"any\");\r\n\tstatic Void = Symbol(\"void\");\r\n\tstatic NoReturn = this.Void;\r\n\r\n\tstatic NotNull = this.NotType(null);\r\n\tstatic NotUndefined = this.NotType(undefined);\r\n\r\n\t// ==================================================\r\n\r\n\tstatic matchType(value, expected) {\r\n\t\tif (Array.isArray(expected)) {\r\n\t\t\tconst notTypes = expected.filter((t) => t instanceof this._NotType);\r\n\t\t\tconst isNotExcluded = notTypes.some((t) => this.checkType(value, t.typeToExclude));\r\n\t\t\tif (isNotExcluded) return false;\r\n\t\t\tconst notExcluded = expected.filter((t) => !(t instanceof this._NotType));\r\n\t\t\tif (notExcluded.length === 0) return true;\r\n\t\t\treturn notExcluded.some((e) => this.checkType(value, e));\r\n\t\t}\r\n\t\treturn this.checkType(value, expected);\r\n\t}\r\n\r\n\tstatic checkType(value, expected) {\r\n\t\tif (expected instanceof this._NotType) {\r\n\t\t\t// 除外型なので、valueが除外型にマッチしたらfalse\r\n\t\t\treturn !this.checkType(value, expected.typeToExclude);\r\n\t\t}\r\n\t\tif (expected === this.Any) return true;\r\n\t\tif (expected === this.NoReturn) return value === undefined;\r\n\t\tif (expected === null) return value === null;\r\n\t\tif (expected === undefined) return value === undefined;\r\n\t\tif (expected === String || expected === Number || expected === Boolean || expected === Symbol || expected === Function || expected === BigInt) return typeof value === expected.name.toLowerCase();\r\n\t\tif (expected === Object) return typeof value === \"object\" && value !== null && !Array.isArray(value);\r\n\t\tif (expected === Array) return Array.isArray(value);\r\n\t\t// ----- Enum対応\r\n\t\tif (expected instanceof _EnumCore) {\r\n\t\t\t// Enumの場合\r\n\t\t\treturn expected.has(value?.name);\r\n\t\t}\r\n\t\tif (expected === _EnumItem) return value instanceof _EnumItem;\r\n\t\t// -----\r\n\t\tif (typeof expected === \"function\") return value instanceof expected;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstatic typeNames(expected) {\r\n\t\tif (Array.isArray(expected)) return expected.map((t) => t?.name || TypeChecker.stringify(t)).join(\" | \");\r\n\t\treturn expected?.name || TypeChecker.stringify(expected);\r\n\t}\r\n\r\n\tstatic stringify(value) {\r\n\t\tif (value === null || value === undefined) {\r\n\t\t\treturn String(value);\r\n\t\t}\r\n\t\tif (typeof value === \"object\") {\r\n\t\t\tif (value?.toString() !== \"[object Object]\") {\r\n\t\t\t\treturn String(value);\r\n\t\t\t}\r\n\t\t\tif (value instanceof this._NotType) {\r\n\t\t\t\treturn `NotType(${TypeChecker.stringify(value.typeToExclude)})`;\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tconst jsonString = JSON.stringify(\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\t(key, val) => {\r\n\t\t\t\t\t\tif (val && typeof val === \"object\") {\r\n\t\t\t\t\t\t\tconst size = Object.keys(val).length;\r\n\t\t\t\t\t\t\t// オブジェクトが大きすぎる場合は省略表示\r\n\t\t\t\t\t\t\tif (size > 5) {\r\n\t\t\t\t\t\t\t\treturn `Object with ${size} properties`;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn val;\r\n\t\t\t\t\t},\r\n\t\t\t\t\t0\r\n\t\t\t\t);\r\n\t\t\t\t// JSON.stringifyエラー時にfallback\r\n\t\t\t\tif (jsonString === undefined) {\r\n\t\t\t\t\treturn \"Object is too large to display or contains circular references\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn jsonString.length > 1000 ? \"Object is too large to display\" : jsonString; // 文字数が多すぎる場合は省略\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn `[オブジェクト表示エラー: ${e.message}]`; // サークル参照等のエラー防止\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn String(value); // それ以外の型はそのまま文字列に変換\r\n\t}\r\n\r\n\tstatic checkFunction(fn) {\r\n\t\tif (typeof fn !== \"function\") return false;\r\n\t\tif (this.checkClass(fn)) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tstatic checkClass(fn) {\r\n\t\tif (typeof fn !== \"function\") return false;\r\n\t\tif (this._CLASS_REG.test(fn.toString())) return true;\r\n\t\tif (fn === Function) return true;\r\n\t\ttry {\r\n\t\t\tnew new Proxy(fn, { construct: () => ({}) })();\r\n\t\t\treturn true;\r\n\t\t} catch {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = TypeChecker;\r\n",
    "module.exports = {\n  TypeChecker: require(\"./TypeChecker.js\"),\n  sys: require(\"./sys\")\n};\n",
    "const LIBRARY_ID = Symbol(\"JavaLibraryScript\");\n\nclass JavaLibraryScriptCore {\n\tstatic [LIBRARY_ID] = true;\n}\n\nmodule.exports = JavaLibraryScriptCore;\n",
    "module.exports = {\n  JavaLibraryScriptCore: require(\"./JavaLibraryScriptCore.js\")\n};\n",
    "const JavaLibraryScript = require(\"./index.js\");\n\nif (typeof window !== \"undefined\") {\n\twindow.JavaLibraryScript = JavaLibraryScript;\n}\n\nmodule.exports = JavaLibraryScript;\n",
    "const Interface = require(\"../base/Interface\");\nconst TypeChecker = require(\"../libs/TypeChecker\");\n\nconst Any = TypeChecker.Any;\nconst NoReturn = TypeChecker.NoReturn;\nconst NotNull = TypeChecker.NotNull;\nconst NotUndefined = TypeChecker.NotUndefined;\n\nconst NotEmpty = [NotNull, NotUndefined];\n\nclass BaseMap extends Interface {\n\tstatic methodTypes = {\n\t\tput: { args: [NotEmpty, NotEmpty], returns: NoReturn },\n\t\tget: { args: [NotEmpty], returns: Any },\n\t\tremove: { args: [NotEmpty], returns: Boolean },\n\t\tsize: { returns: Number },\n\t\tisEmpty: { returns: Boolean },\n\t\tclear: { returns: NoReturn },\n\t\tcontainsKey: { args: [NotEmpty], returns: Boolean },\n\t\tcontainsValue: { args: [NotEmpty], returns: Boolean },\n\t\tkeys: { returns: Array },\n\t\tvalues: { returns: Array },\n\t\tentrySet: { returns: Array },\n\t};\n\n\tconstructor(KeyType, ValueType) {\n\t\tsuper();\n\t\tif (new.target === BaseMap) {\n\t\t\tthrow new TypeError(\"Cannot instantiate abstract class BaseMap\");\n\t\t}\n\n\t\tthis.KeyType = KeyType;\n\t\tthis.ValueType = ValueType;\n\t}\n\n\t_checkKey(key) {\n\t\tif (!TypeChecker.matchType(key, this.KeyType)) {\n\t\t\tthrow new TypeError(`キー型が一致しません。期待: ${this.KeyType.name} → 実際: ${TypeChecker.stringify(key)}`);\n\t\t}\n\t}\n\n\t_checkValue(value) {\n\t\tif (!TypeChecker.matchType(value, this.ValueType)) {\n\t\t\tthrow new TypeError(`値型が一致しません。期待: ${this.ValueType.name} → 実際: ${TypeChecker.stringify(value)}`);\n\t\t}\n\t}\n}\n\nmodule.exports = BaseMap;\n",
    "const BaseMap = require(\"./BaseMap\");\n\nclass HashMap extends BaseMap {\n\tconstructor(KeyType, ValueType) {\n\t\tsuper(KeyType, ValueType);\n\t\tthis._data = new Map();\n\t}\n\n\tput(key, value) {\n\t\tthis._checkKey(key);\n\t\tthis._checkValue(value);\n\t\tthis._data.set(key, value);\n\t}\n\n\tputAll(map) {\n\t\tfor (const [k, v] of map.entries()) {\n\t\t\tthis.set(k, v);\n\t\t}\n\t}\n\n\tget(key) {\n\t\tthis._checkKey(key);\n\t\tif (!this._map.has(key)) return undefined;\n\t\treturn this._data.get(key);\n\t}\n\n\tcontainsKey(key) {\n\t\tthis._checkKey(key);\n\t\treturn this._data.has(key);\n\t}\n\n\tcontainsValue(value) {\n\t\tfor (const v of this.values()) {\n\t\t\tif (v === value) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tremove(key) {\n\t\tthis._checkKey(key);\n\t\treturn this._data.delete(key);\n\t}\n\n\tsize() {\n\t\treturn this._data.size;\n\t}\n\n\tisEmpty() {\n\t\treturn this._data.size === 0;\n\t}\n\n\tclear() {\n\t\tthis._data.clear();\n\t}\n\n\tcontainsKey(key) {\n\t\tthis._checkKey(key);\n\t\treturn this._data.has(key);\n\t}\n\n\tcontainsValue(value) {\n\t\tfor (const val of this._data.values()) {\n\t\t\tif (val === value) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tkeys() {\n\t\treturn Array.from(this._data.keys());\n\t}\n\n\tvalues() {\n\t\treturn Array.from(this._data.values());\n\t}\n\n\tentrySet() {\n\t\treturn Array.from(this._data.entries());\n\t}\n\n\tequals(otherMap) {\n\t\tif (this.size !== otherMap.size) return false;\n\t\tfor (const [k, v] of this.entries()) {\n\t\t\tif (!otherMap.has(k) || otherMap.get(k) !== v) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tforEach(callback, thisArg) {\n\t\tfor (const [key, value] of this._data.entries()) {\n\t\t\tcallback.call(thisArg, value, key, this);\n\t\t}\n\t}\n\n\ttoString() {\n\t\tconst data = Array.from(this.entries())\n\t\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t\t.join(\", \");\n\t\treturn `{ ${data} }`;\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries()[Symbol.iterator]();\n\t}\n}\n\nmodule.exports = HashMap;\n",
    "const HashMap = require(\"./HashMap\");\n\nclass LinkedHashMap extends HashMap {\n\tconstructor(KeyType, ValueType, { accessOrder = false } = {}) {\n\t\tsuper(KeyType, ValueType);\n\t\tthis._accessOrder = accessOrder;\n\t}\n\n\tput(key, value) {\n\t\tthis._checkKey(key);\n\t\tthis._checkValue(value);\n\n\t\tif (this._accessOrder && this._data.has(key)) {\n\t\t\tthis._data.delete(key); // 移動のため一度削除\n\t\t}\n\t\tsuper.put(key, value);\n\t}\n\n\tget(key) {\n\t\tconst value = super.get(key);\n\t\tif (this._accessOrder && value !== undefined) {\n\t\t\tthis._data.delete(key); // 移動のため一度削除\n\t\t\tthis._data.set(key, value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nmodule.exports = LinkedHashMap;\n",
    "const HashMap = require(\"./HashMap\");\n\nclass TreeMap extends HashMap {\n\tstatic defaultCompare(a, b) {\n\t\tif (typeof a === \"number\" && typeof b === \"number\") return a - b;\n\t\tif (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b);\n\t\tconst sa = String(a),\n\t\t\tsb = String(b);\n\t\treturn sa > sb ? 1 : sa < sb ? -1 : 0;\n\t}\n\n\tstatic compareByProp(propName, fallback = TreeMap.defaultCompare) {\n\t\treturn (a, b) => fallback(a[propName], b[propName]);\n\t}\n\n\tconstructor(KeyType, ValueType, compareFunction = TreeMap.defaultCompare) {\n\t\tsuper(KeyType, ValueType);\n\t\tthis._compare = compareFunction;\n\t\tthis._sortedKeys = null;\n\t}\n\n\t_invalidateSortedKeys() {\n\t\tthis._sortedKeys = null;\n\t}\n\n\t_getSortedKeys() {\n\t\tif (!this._sortedKeys) {\n\t\t\tthis._sortedKeys = Array.from(this.keys()).sort(this._compare);\n\t\t}\n\t\treturn this._sortedKeys;\n\t}\n\n\tput(key, value) {\n\t\tconst existed = this._data.has(key);\n\t\tsuper.put(key, value);\n\t\tif (!existed) this._invalidateSortedKeys();\n\t}\n\n\tremove(key) {\n\t\tconst deleted = super.remove(key);\n\t\tif (deleted) this._invalidateSortedKeys();\n\t\treturn deleted;\n\t}\n\n\tclear() {\n\t\tsuper.clear();\n\t\tthis._invalidateSortedKeys();\n\t}\n\n\tkeys() {\n\t\treturn this._getSortedKeys().slice();\n\t}\n\n\tvalues() {\n\t\treturn this._getSortedKeys().map((k) => this._data.get(k));\n\t}\n\n\tentrySet() {\n\t\treturn this._getSortedKeys().map((k) => [k, this._data.get(k)]);\n\t}\n\n\tfirstKey() {\n\t\tconst keys = this._getSortedKeys();\n\t\treturn keys.length > 0 ? keys[0] : undefined;\n\t}\n\n\tlastKey() {\n\t\tconst keys = this._getSortedKeys();\n\t\treturn keys.length > 0 ? keys[keys.length - 1] : undefined;\n\t}\n\n\tceilingKey(key) {\n\t\treturn this._getSortedKeys().find((k) => this._compare(k, key) >= 0);\n\t}\n\n\tfloorKey(key) {\n\t\tconst keys = this._getSortedKeys();\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tif (this._compare(keys[i], key) <= 0) return keys[i];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\theadMap(toKey) {\n\t\tconst map = new TreeMap();\n\t\tfor (const k of this._getSortedKeys()) {\n\t\t\tif (this._compare(k, toKey) >= 0) break;\n\t\t\tmap.set(k, this.get(k));\n\t\t}\n\t\treturn map;\n\t}\n\n\ttailMap(fromKey) {\n\t\tconst map = new TreeMap();\n\t\tfor (const k of this._getSortedKeys()) {\n\t\t\tif (this._compare(k, fromKey) >= 0) map.set(k, this.get(k));\n\t\t}\n\t\treturn map;\n\t}\n\n\tsubMap(fromKey, toKey) {\n\t\tconst map = new TreeMap();\n\t\tfor (const k of this._getSortedKeys()) {\n\t\t\tif (this._compare(k, toKey) >= 0) break;\n\t\t\tif (this._compare(k, fromKey) >= 0) map.set(k, this.get(k));\n\t\t}\n\t\treturn map;\n\t}\n\n\tforEach(callback, thisArg) {\n\t\tfor (const key of this._getSortedKeys()) {\n\t\t\tcallback.call(thisArg, this._map.get(key), key, this);\n\t\t}\n\t}\n}\n\nmodule.exports = TreeMap;\n",
    "module.exports = {\n  BaseMap: require(\"./BaseMap.js\"),\n  HashMap: require(\"./HashMap.js\"),\n  LinkedHashMap: require(\"./LinkedHashMap.js\"),\n  TreeMap: require(\"./TreeMap.js\"),\n  stream: require(\"./stream\")\n};\n",
    "const StreamInterface = require(\"./StreamInterface.js\");\nconst Stream = require(\"./Stream.js\");\n\nclass AsyncStream extends StreamInterface {\n\tconstructor(source) {\n\t\tsuper();\n\t\tthis._iter = AsyncStream._normalize(source);\n\t\tthis._pipeline = [];\n\t}\n\n\tstatic from(iterable) {\n\t\treturn new AsyncStream(iterable);\n\t}\n\n\tstatic _normalize(input) {\n\t\tif (typeof input[Symbol.asyncIterator] === \"function\") return input;\n\t\tif (typeof input[Symbol.iterator] === \"function\") {\n\t\t\treturn (async function* () {\n\t\t\t\tfor (const x of input) yield x;\n\t\t\t})();\n\t\t}\n\t\tthrow new TypeError(\"not (Async)Iterable\");\n\t}\n\n\t_use(fn) {\n\t\tthis._pipeline.push(fn);\n\t\treturn this;\n\t}\n\n\t// ==================================================\n\t// パイプライン計算\n\t// ==================================================\n\n\tflattenPipeline() {\n\t\tconst flattenedFn = this._pipeline.reduceRight(\n\t\t\t(nextFn, currentFn) => {\n\t\t\t\treturn async function* (iterable) {\n\t\t\t\t\tyield* currentFn(nextFn(iterable));\n\t\t\t\t};\n\t\t\t},\n\t\t\tasync function* (x) {\n\t\t\t\tyield* x;\n\t\t\t}\n\t\t);\n\t\tconst flat = new this.constructor([]);\n\t\tflat._iter = this._iter;\n\t\tflat._pipeline = [flattenedFn];\n\t\treturn flat;\n\t}\n\n\ttoFunction() {\n\t\tconst flat = this.flattenPipeline();\n\t\tconst fn = flat._pipeline[0];\n\t\treturn (input) => fn(input);\n\t}\n\n\t// ==================================================\n\t// Pipeline\n\t// ==================================================\n\n\tmap(fn) {\n\t\treturn this._use(async function* (iter) {\n\t\t\tfor await (const x of iter) yield await fn(x);\n\t\t});\n\t}\n\n\tfilter(fn) {\n\t\treturn this._use(async function* (iter) {\n\t\t\tfor await (const x of iter) {\n\t\t\t\tif (await fn(x)) yield x;\n\t\t\t}\n\t\t});\n\t}\n\n\tflatMap(fn) {\n\t\treturn this._use(async function* (iter) {\n\t\t\tfor await (const x of iter) {\n\t\t\t\tconst sub = await fn(x);\n\t\t\t\tfor await (const y of AsyncStream._normalize(sub)) yield y;\n\t\t\t}\n\t\t});\n\t}\n\n\tdistinct(keyFn = (x) => x) {\n\t\treturn this._use(async function* (iter) {\n\t\t\tconst seen = new Set();\n\t\t\tfor await (const x of iter) {\n\t\t\t\tconst key = await keyFn(x);\n\t\t\t\tif (!seen.has(key)) {\n\t\t\t\t\tseen.add(key);\n\t\t\t\t\tyield x;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tlimit(n) {\n\t\treturn this._use(async function* (iter) {\n\t\t\tlet i = 0;\n\t\t\tfor await (const x of iter) {\n\t\t\t\tif (i++ < n) yield x;\n\t\t\t\telse break;\n\t\t\t}\n\t\t});\n\t}\n\n\tskip(n) {\n\t\treturn this._use(async function* (iter) {\n\t\t\tlet i = 0;\n\t\t\tfor await (const x of iter) {\n\t\t\t\tif (i++ >= n) yield x;\n\t\t\t}\n\t\t});\n\t}\n\n\t// ==================================================\n\t// Iterator\n\t// ==================================================\n\n\t[Symbol.asyncIterator]() {\n\t\tlet iter = this._iter;\n\t\tfor (const op of this._pipeline) {\n\t\t\titer = op(iter);\n\t\t}\n\t\treturn iter[Symbol.asyncIterator]();\n\t}\n\t// ==================================================\n\t// End\n\t// ==================================================\n\n\tasync forEach(fn) {\n\t\tfor await (const x of this) {\n\t\t\tawait fn(x);\n\t\t}\n\t}\n\n\tasync toArray() {\n\t\tconst result = [];\n\t\tfor await (const x of this) {\n\t\t\tresult.push(x);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync reduce(fn, init) {\n\t\tlet acc = init;\n\t\tfor await (const x of this) {\n\t\t\tacc = await fn(acc, x);\n\t\t}\n\t\treturn acc;\n\t}\n\n\tcount() {\n\t\treturn this.reduce((acc) => acc + 1, 0);\n\t}\n\n\t// ==================================================\n\t// mapTo\n\t// ==================================================\n\n\ttoLazy() {\n\t\treturn new Promise(async (resolve) => {\n\t\t\tconst arr = [];\n\t\t\tfor await (const item of this) {\n\t\t\t\tarr.push(item);\n\t\t\t}\n\t\t\tresolve(new Stream(arr));\n\t\t});\n\t}\n}\n\nmodule.exports = AsyncStream;\n",
    "const Stream = require(\"./Stream.js\");\n\nclass EntryStream extends Stream {\n\tconstructor(source) {\n\t\tsuper(source);\n\n\t\tthis.mapToEntry = undefined;\n\t}\n\n\tkeys() {\n\t\treturn this._convertToX(Stream).map(([k, _]) => k);\n\t}\n\n\tvalues() {\n\t\treturn this._convertToX(Stream).map(([_, v]) => v);\n\t}\n\n\tmapKeys(fn) {\n\t\treturn this.map(([k, v]) => [fn(k), v]);\n\t}\n\n\tmapValues(fn) {\n\t\treturn this.map(([k, v]) => [k, fn(v)]);\n\t}\n}\n\nmodule.exports = EntryStream;\n",
    "const Stream = require(\"./Stream.js\");\n\nclass NumberStream extends Stream {\n\tconstructor(source) {\n\t\tsuper(source);\n\n\t\tthis.mapToNumber = undefined;\n\t}\n\n\tsum() {\n\t\tlet total = 0;\n\t\tfor (const num of this) {\n\t\t\ttotal += num;\n\t\t}\n\t\treturn total;\n\t}\n\n\taverage() {\n\t\tlet total = 0;\n\t\tlet count = 0;\n\t\tfor (const num of this) {\n\t\t\ttotal += num;\n\t\t\tcount++;\n\t\t}\n\t\treturn count === 0 ? NaN : total / count;\n\t}\n\n\tmin() {\n\t\tlet min = Infinity;\n\t\tfor (const num of this) {\n\t\t\tif (num < min) min = num;\n\t\t}\n\t\treturn min === Infinity ? undefined : min;\n\t}\n\n\tmax() {\n\t\tlet max = -Infinity;\n\t\tfor (const num of this) {\n\t\t\tif (num > max) max = num;\n\t\t}\n\t\treturn max === -Infinity ? undefined : max;\n\t}\n}\n\nmodule.exports = NumberStream;\n",
    "const StreamInterface = require(\"./StreamInterface.js\");\n\nlet NumberStream, StringStream, EntryStream, AsyncStream;\nfunction init() {\n\tif (NumberStream) return;\n\tNumberStream = require(\"./NumberStream.js\");\n\tStringStream = require(\"./StringStream.js\");\n\tEntryStream = require(\"./EntryStream.js\");\n\tAsyncStream = require(\"./AsyncStream.js\");\n}\n\nclass Stream extends StreamInterface {\n\tconstructor(source) {\n\t\tsuper();\n\t\tthis._iter = source[Symbol.iterator]();\n\t\tthis._pipeline = [];\n\n\t\tinit();\n\t}\n\n\tstatic from(iterable) {\n\t\treturn new this(iterable);\n\t}\n\n\t_use(fn) {\n\t\tthis._pipeline.push(fn);\n\t\treturn this;\n\t}\n\n\t// ==================================================\n\t// パイプライン計算\n\t// ==================================================\n\n\t_convertToX(construct, fn) {\n\t\tconst newStream = new construct([]);\n\t\tnewStream._iter = this._iter;\n\t\tnewStream._pipeline = [...this._pipeline];\n\t\tif (fn) newStream._pipeline.push(fn);\n\t\treturn newStream;\n\t}\n\n\tflattenPipeline() {\n\t\tconst flattenedFn = this._pipeline.reduceRight(\n\t\t\t(nextFn, currentFn) => {\n\t\t\t\treturn function* (iterable) {\n\t\t\t\t\tyield* currentFn(nextFn(iterable));\n\t\t\t\t};\n\t\t\t},\n\t\t\t(x) => x\n\t\t);\n\n\t\tconst flat = new this.constructor([]); // 継承クラス対応\n\t\tflat._iter = this._iter;\n\t\tflat._pipeline = [flattenedFn];\n\t\treturn flat;\n\t}\n\n\ttoFunction() {\n\t\tconst flat = this.flattenPipeline();\n\t\tconst fn = flat._pipeline[0];\n\t\treturn (input) => fn(input);\n\t}\n\n\t// ==================================================\n\t// Pipeline\n\t// ==================================================\n\n\tmap(fn) {\n\t\treturn this._use(function* (iter) {\n\t\t\tfor (const item of iter) yield fn(item);\n\t\t});\n\t}\n\n\tfilter(fn) {\n\t\treturn this._use(function* (iter) {\n\t\t\tfor (const item of iter) if (fn(item)) yield item;\n\t\t});\n\t}\n\n\tflatMap(fn) {\n\t\treturn this._use(function* (iter) {\n\t\t\tfor (const item of iter) {\n\t\t\t\tconst sub = fn(item);\n\t\t\t\tyield* sub instanceof StreamInterface ? sub : sub[Symbol.iterator]();\n\t\t\t}\n\t\t});\n\t}\n\n\tdistinct() {\n\t\treturn this._use(function* (iter) {\n\t\t\tconst seen = new Set();\n\t\t\tfor (const item of iter) {\n\t\t\t\tconst key = JSON.stringify(item);\n\t\t\t\tif (!seen.has(key)) {\n\t\t\t\t\tseen.add(key);\n\t\t\t\t\tyield item;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tsorted(compareFn = (a, b) => (a > b ? 1 : a < b ? -1 : 0)) {\n\t\treturn this._use(function* (iter) {\n\t\t\tconst arr = [...iter].sort(compareFn);\n\t\t\tyield* arr;\n\t\t});\n\t}\n\n\tpeek(fn) {\n\t\treturn this._use(function* (iter) {\n\t\t\tfor (const item of iter) {\n\t\t\t\tfn(item);\n\t\t\t\tyield item;\n\t\t\t}\n\t\t});\n\t}\n\n\tlimit(n) {\n\t\treturn this._use(function* (iter) {\n\t\t\tlet i = 0;\n\t\t\tfor (const item of iter) {\n\t\t\t\tif (i++ >= n) break;\n\t\t\t\tyield item;\n\t\t\t}\n\t\t});\n\t}\n\n\tskip(n) {\n\t\treturn this._use(function* (iter) {\n\t\t\tlet i = 0;\n\t\t\tfor (const item of iter) {\n\t\t\t\tif (i++ < n) continue;\n\t\t\t\tyield item;\n\t\t\t}\n\t\t});\n\t}\n\n\tchunk(size) {\n\t\treturn this._use(function* (iter) {\n\t\t\tlet buf = [];\n\t\t\tfor (const item of iter) {\n\t\t\t\tbuf.push(item);\n\t\t\t\tif (buf.length === size) {\n\t\t\t\t\tyield buf;\n\t\t\t\t\tbuf = [];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (buf.length) yield buf;\n\t\t});\n\t}\n\n\twindowed(size, step = size) {\n\t\treturn this._use(function* (iter) {\n\t\t\tconst buffer = [];\n\t\t\tfor (const item of iter) {\n\t\t\t\tbuffer.push(item);\n\t\t\t\tif (buffer.length === size) {\n\t\t\t\t\tyield buffer.slice();\n\t\t\t\t\tbuffer.splice(0, step); // スライド\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// ==================================================\n\t// Iterator\n\t// ==================================================\n\n\t[Symbol.iterator]() {\n\t\treturn this._pipeline.reduce((iter, fn) => fn(iter), this._iter);\n\t}\n\n\t[Symbol.asyncIterator]() {\n\t\tlet iter = this._pipeline.reduce((i, fn) => fn(i), this._iter);\n\t\treturn {\n\t\t\tasync next() {\n\t\t\t\treturn Promise.resolve(iter.next());\n\t\t\t},\n\t\t};\n\t}\n\n\t// ==================================================\n\t// End\n\t// ==================================================\n\n\tforEach(fn) {\n\t\tfor (const item of this) fn(item);\n\t}\n\n\ttoArray() {\n\t\treturn Array.from(this);\n\t}\n\n\treduce(fn, initial) {\n\t\tlet acc = initial;\n\t\tfor (const item of this) {\n\t\t\tacc = fn(acc, item);\n\t\t}\n\t\treturn acc;\n\t}\n\n\tcount() {\n\t\tlet c = 0;\n\t\tfor (const _ of this) c++;\n\t\treturn c;\n\t}\n\n\tanyMatch(fn) {\n\t\tfor (const item of this) {\n\t\t\tif (fn(item)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tallMatch(fn) {\n\t\tfor (const item of this) {\n\t\t\tif (!fn(item)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tnoneMatch(fn) {\n\t\tfor (const item of this) {\n\t\t\tif (fn(item)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tfindFirst() {\n\t\tfor (const item of this) return item;\n\t\treturn undefined;\n\t}\n\n\tfindAny() {\n\t\treturn this.findFirst(); // 同義（非並列）\n\t}\n\n\t// Java Collectors 相当\n\tcollectWith(collectorFn) {\n\t\treturn collectorFn(this);\n\t}\n\n\t// ==================================================\n\t// mapTo\n\t// ==================================================\n\n\tmapToNumber(fn) {\n\t\treturn this._convertToX(NumberStream, function* (iter) {\n\t\t\tfor (const item of iter) {\n\t\t\t\tconst mapped = fn(item);\n\t\t\t\tif (typeof mapped !== \"number\") {\n\t\t\t\t\tthrow new TypeError(`mapToNumber() must return number. Got ${typeof mapped}`);\n\t\t\t\t}\n\t\t\t\tyield mapped;\n\t\t\t}\n\t\t});\n\t}\n\n\tmapToString(fn) {\n\t\treturn this._convertToX(StringStream, function* (iter) {\n\t\t\tfor (const item of iter) {\n\t\t\t\tconst mapped = fn(item);\n\t\t\t\tif (typeof mapped !== \"string\") {\n\t\t\t\t\tthrow new TypeError(`mapToString() must return string. Got ${typeof mapped}`);\n\t\t\t\t}\n\t\t\t\tyield mapped;\n\t\t\t}\n\t\t});\n\t}\n\n\tmapToEntry(fn) {\n\t\treturn this._convertToX(EntryStream, function* (iter) {\n\t\t\tfor (const item of iter) {\n\t\t\t\tconst entry = fn(item);\n\t\t\t\tif (!Array.isArray(entry) || entry.length !== 2) {\n\t\t\t\t\tthrow new TypeError(`mapToEntry() must return [key, value] pair. Got: ${entry}`);\n\t\t\t\t}\n\t\t\t\tyield entry;\n\t\t\t}\n\t\t});\n\t}\n\n\tmapToAsync(fn) {\n\t\tconst input = this.flattenPipeline();\n\t\tconst sourceIterable = input._pipeline[0](input._iter); // 実行（同期 generator）\n\n\t\t// AsyncStream に渡す非同期イテレータを構築\n\t\tconst asyncIterable = (async function* () {\n\t\t\tfor (const item of sourceIterable) {\n\t\t\t\tyield await fn(item);\n\t\t\t}\n\t\t})();\n\n\t\treturn new AsyncStream(asyncIterable);\n\t}\n}\n\nmodule.exports = Stream;\n",
    "const JavaLibraryScriptCore = require(\"../../libs/sys/JavaLibraryScriptCore.js\");\n\nclass StreamInterface extends JavaLibraryScriptCore {\n\tstatic methodTypes = {\n\t\tmap: {\n\t\t\targs: [Function],\n\t\t\treturns: StreamInterface,\n\t\t},\n\t\tfilter: {\n\t\t\targs: [Function],\n\t\t\treturns: StreamInterface,\n\t\t},\n\t\tflatMap: {\n\t\t\targs: [Function],\n\t\t\treturns: StreamInterface,\n\t\t},\n\t\t//\n\t\tforEach: {\n\t\t\targs: [[Function, Promise]],\n\t\t\treturns: [undefined, Promise],\n\t\t},\n\t};\n\n\tconstructor() {\n\t\tsuper();\n\t\tif (new.target === StreamInterface) {\n\t\t\tthrow new TypeError(\"Cannot instantiate abstract class StreamInterface\");\n\t\t}\n\t}\n}\n\nmodule.exports = StreamInterface;\n",
    "const Stream = require(\"./Stream.js\");\n\nclass StringStream extends Stream {\n\tconstructor(source) {\n\t\tsuper(source);\n\n\t\tthis.mapToString = undefined;\n\t}\n\n\tjoin(separator = \"\") {\n\t\treturn Array.from(this).join(separator);\n\t}\n\n\tconcatAll() {\n\t\treturn this.join(\"\");\n\t}\n\n\tlongest() {\n\t\tlet max = \"\";\n\t\tfor (const str of this) {\n\t\t\tif (typeof str !== \"string\") throw new TypeError(\"All elements must be strings\");\n\t\t\tif (str.length > max.length) max = str;\n\t\t}\n\t\treturn max || undefined;\n\t}\n\n\tshortest() {\n\t\tlet min = null;\n\t\tfor (const str of this) {\n\t\t\tif (typeof str !== \"string\") throw new TypeError(\"All elements must be strings\");\n\t\t\tif (min === null || str.length < min.length) min = str;\n\t\t}\n\t\treturn min || undefined;\n\t}\n}\n\nmodule.exports = StringStream;\n",
    "module.exports = {\n  AsyncStream: require(\"./AsyncStream.js\"),\n  EntryStream: require(\"./EntryStream.js\"),\n  NumberStream: require(\"./NumberStream.js\"),\n  Stream: require(\"./Stream.js\"),\n  StreamInterface: require(\"./StreamInterface.js\"),\n  StringStream: require(\"./StringStream.js\")\n};\n"
  ]
}